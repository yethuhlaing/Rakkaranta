name: Build and deploy a container to an Azure Web App

env:
  REGISTRY: azurecr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: striveplatform.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            NEXT_PUBLIC_APP_URL=${{secrets.NEXT_PUBLIC_APP_URL}}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NEXTAUTH_GITHUB_ID=${{ secrets.NEXTAUTH_GITHUB_ID }}
            NEXTAUTH_GITHUB_SECRET=${{ secrets.NEXTAUTH_GITHUB_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            SENDGRID_API=${{ secrets.SENDGRID_API }}
            STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID }}
            NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID }}
            NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID }}
            NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
            INFLUXDB_ORG=${{ secrets.INFLUXDB_ORG }}
            INFLUXDB_BUCKET=${{ secrets.INFLUXDB_BUCKET }}
            INFLUXDB_URL=${{ secrets.INFLUXDB_URL }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: senseiq
          resource-group-name: warehouse-safety-enhancer
          configuration-file: ./docker-compose.prod.yml
  # deploy:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: Deploy to Azure VM
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.VM_HOST }}
  #         username: ${{ secrets.VM_USERNAME }}
  #         key: ${{ secrets.VM_SSH_KEY }}
  #         script: |
  #           set -e
  #           echo "Creating Docker network if it doesn't exist..."
  #           docker network create app-network || true

  #           echo "Logging in to GitHub Container Registry..."
  #           echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

  #           echo "Pulling latest frontend image..."
  #           docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

  #           echo "Stopping and removing existing frontend container..."
  #           docker stop frontend-container || true
  #           docker rm frontend-container || true

  #           echo "Running new frontend container..."
  #           docker run -d --restart=always --name frontend-container --network app-network -p 3000:3000 \
  #             -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
  #             -e GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}' \
  #             -e GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}' \
  #             -e NEXT_PUBLIC_APP_URL=${{secrets.NEXT_PUBLIC_APP_URL}} \
  #             -e NEXTAUTH_GITHUB_ID='${{ secrets.NEXTAUTH_GITHUB_ID }}' \
  #             -e NEXTAUTH_GITHUB_SECRET='${{ secrets.NEXTAUTH_GITHUB_SECRET }}' \
  #             -e RESEND_API_KEY='${{ secrets.RESEND_API_KEY }}' \
  #             -e EMAIL_FROM='${{ secrets.EMAIL_FROM }}' \
  #             -e SENDGRID_API='${{ secrets.SENDGRID_API }}' \
  #             -e STRIPE_API_KEY='${{ secrets.STRIPE_API_KEY }}' \
  #             -e STRIPE_WEBHOOK_SECRET='${{ secrets.STRIPE_WEBHOOK_SECRET }}' \
  #             -e NEXTAUTH_URL='${{ secrets.NEXTAUTH_URL }}' \
  #             -e NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}' \
  #             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest

  #           echo "Pulling latest backend image..."
  #           docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest

  #           echo "Stopping and removing existing backend container..."
  #           docker stop backend-container || true
  #           docker rm backend-container || true

  #           echo "Running new backend container..."
  #           docker run -d --restart=always --name backend-container --network app-network -p 5000:5000 \
  #             -e INFLUXDB_TOKEN='${{ secrets.INFLUXDB_TOKEN }}' \
  #             -e INFLUXDB_ORG='${{ secrets.INFLUXDB_ORG }}' \
  #             -e INFLUXDB_BUCKET='${{ secrets.INFLUXDB_BUCKET }}' \
  #             -e INFLUXDB_URL='${{ secrets.INFLUXDB_URL }}' \
  #             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest  

  #           echo "Pruning old Docker images..."
  #           docker image prune -f

  #           echo "Deployment completed successfully!"