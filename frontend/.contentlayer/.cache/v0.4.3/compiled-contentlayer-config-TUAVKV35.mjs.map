{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n    ComputedFields,\r\n    defineDocumentType,\r\n    makeSource,\r\n} from \"contentlayer2/source-files\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrettyCode from \"rehype-pretty-code\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport { visit } from \"unist-util-visit\";\r\n\r\nconst defaultComputedFields: ComputedFields = {\r\n    slug: {\r\n        type: \"string\",\r\n        resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n    },\r\n    slugAsParams: {\r\n        type: \"string\",\r\n        resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\r\n    },\r\n    images: {\r\n        type: \"list\",\r\n        resolve: (doc) => {\r\n            return (\r\n                doc.body.raw.match(\r\n                    /(?<=<Image[^>]*\\bsrc=\")[^\"]+(?=\"[^>]*\\/>)/g,\r\n                ) || []\r\n            );\r\n        },\r\n    },\r\n};\r\n\r\nexport const Doc = defineDocumentType(() => ({\r\n    name: \"Doc\",\r\n    filePathPattern: `docs/**/*.mdx`,\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: {\r\n            type: \"string\",\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: \"string\",\r\n        },\r\n        published: {\r\n            type: \"boolean\",\r\n            default: true,\r\n        },\r\n    },\r\n    computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport const Guide = defineDocumentType(() => ({\r\n    name: \"Guide\",\r\n    filePathPattern: `guides/**/*.mdx`,\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: {\r\n            type: \"string\",\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: \"string\",\r\n        },\r\n        date: {\r\n            type: \"date\",\r\n            required: true,\r\n        },\r\n        published: {\r\n            type: \"boolean\",\r\n            default: true,\r\n        },\r\n        featured: {\r\n            type: \"boolean\",\r\n            default: false,\r\n        },\r\n    },\r\n    computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n    name: \"Post\",\r\n    filePathPattern: `blog/**/*.mdx`,\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: {\r\n            type: \"string\",\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: \"string\",\r\n        },\r\n        date: {\r\n            type: \"date\",\r\n            required: true,\r\n        },\r\n        published: {\r\n            type: \"boolean\",\r\n            default: true,\r\n        },\r\n        image: {\r\n            type: \"string\",\r\n            required: true,\r\n        },\r\n        authors: {\r\n            type: \"list\",\r\n            of: { type: \"string\" },\r\n            required: true,\r\n        },\r\n        categories: {\r\n            type: \"list\",\r\n            of: {\r\n                type: \"enum\",\r\n                options: [\"news\", \"education\"],\r\n                default: \"news\",\r\n            },\r\n            required: true,\r\n        },\r\n        related: {\r\n            type: \"list\",\r\n            of: {\r\n                type: \"string\",\r\n            },\r\n        },\r\n    },\r\n    computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport const Page = defineDocumentType(() => ({\r\n    name: \"Page\",\r\n    filePathPattern: `pages/**/*.mdx`,\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: {\r\n            type: \"string\",\r\n            required: true,\r\n        },\r\n        description: {\r\n            type: \"string\",\r\n        },\r\n    },\r\n    computedFields: defaultComputedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n    contentDirPath: \"./src/content\",\r\n    documentTypes: [Page, Doc, Guide, Post],\r\n    mdx: {\r\n        remarkPlugins: [remarkGfm],\r\n        rehypePlugins: [\r\n            rehypeSlug,\r\n            () => (tree) => {\r\n                visit(tree, (node) => {\r\n                    if (node?.type === \"element\" && node?.tagName === \"pre\") {\r\n                        const [codeEl] = node.children;\r\n\r\n                        if (codeEl.tagName !== \"code\") return;\r\n\r\n                        node.__rawString__ = codeEl.children?.[0].value;\r\n                    }\r\n                });\r\n            },\r\n            [\r\n                rehypePrettyCode,\r\n                {\r\n                    theme: \"github-dark\",\r\n                    keepBackground: false,\r\n                    onVisitLine(node) {\r\n                        // Prevent lines from collapsing in `display: grid` mode, and allow empty lines to be copy/pasted\r\n                        if (node.children.length === 0) {\r\n                            node.children = [{ type: \"text\", value: \" \" }];\r\n                        }\r\n                    },\r\n                },\r\n            ],\r\n            () => (tree) => {\r\n                visit(tree, (node) => {\r\n                    if (\r\n                        node?.type === \"element\" &&\r\n                        node?.tagName === \"figure\"\r\n                    ) {\r\n                        if (\r\n                            !(\r\n                                \"data-rehype-pretty-code-figure\" in\r\n                                node.properties\r\n                            )\r\n                        ) {\r\n                            return;\r\n                        }\r\n\r\n                        const preElement = node.children.at(-1);\r\n                        if (preElement.tagName !== \"pre\") {\r\n                            return;\r\n                        }\r\n\r\n                        preElement.properties[\"__rawString__\"] =\r\n                            node.__rawString__;\r\n                    }\r\n                });\r\n            },\r\n            [\r\n                rehypeAutolinkHeadings,\r\n                {\r\n                    properties: {\r\n                        className: [\"subheading-anchor\"],\r\n                        ariaLabel: \"Link to section\",\r\n                    },\r\n                },\r\n            ],\r\n        ],\r\n    },\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
