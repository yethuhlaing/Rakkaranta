name: Build and deploy a container to an Azure Web App

env:
  REGISTRY: rakkaranta.azurecr.io

on:
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx with containerd
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: rakkaranta.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/frontend:latest
            ${{ env.REGISTRY }}/frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            NEXT_PUBLIC_APP_URL=${{secrets.NEXT_PUBLIC_APP_URL}}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            NEXTAUTH_GITHUB_ID=${{ secrets.NEXTAUTH_GITHUB_ID }}
            NEXTAUTH_GITHUB_SECRET=${{ secrets.NEXTAUTH_GITHUB_SECRET }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
            EMAIL_FROM=${{ secrets.EMAIL_FROM }}
            SENDGRID_API=${{ secrets.SENDGRID_API }}
            STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
            NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID }}
            NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID }}
            NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID }}
            NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID=${{ secrets.NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID }}
            OPENWEATHER_API_KEY=${{secrets.OPENWEATHER_API_KEY}}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/frontend:latest
          cache-to: type=inline

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/backend:latest
            ${{ env.REGISTRY }}/backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/backend:latest
          cache-to: type=inline

      - name: Build and Push InfluxDB Image
        uses: docker/build-push-action@v4
        with:
          context: ./influxdb
          file: ./influxdb/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/influxdb:latest
            ${{ env.REGISTRY }}/influxdb:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
            INFLUXDB_ORG=${{ secrets.INFLUXDB_ORG }}
            INFLUXDB_BUCKET=${{ secrets.INFLUXDB_BUCKET }}
            INFLUXDB_URL=${{ secrets.INFLUXDB_URL }}
            INFLUXDB_INIT_MODE=${{ secrets.INFLUXDB_INIT_MODE }}
            INFLUXDB_INIT_USERNAME=${{ secrets.INFLUXDB_INIT_USERNAME }}
            INFLUXDB_INIT_PASSWORD=${{ secrets.INFLUXDB_INIT_PASSWORD }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/influxdb:latest
          cache-to: type=inline

      - name: Build and push Mosquitto
        uses: docker/build-push-action@v4
        with:
          context: ./mosquitto
          file: ./mosquitto/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/mosquitto:latest
            ${{ env.REGISTRY }}/mosquitto:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}
            MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}

      - name: Build and push Mosquitto Publisher
        uses: docker/build-push-action@v4
        with:
          context: ./publisher
          file: ./publisher/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/mosquitto-publisher:latest
            ${{ env.REGISTRY }}/mosquitto-publisher:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            MOSQUITTO_BROKER_URL=${{ secrets.MOSQUITTO_BROKER_URL }}
            MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}
            MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}

      - name: Build and push Telegraf
        uses: docker/build-push-action@v4
        with:
          context: ./telegraf
          file: ./telegraf/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/telegraf:latest
            ${{ env.REGISTRY }}/telegraf:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
            INFLUXDB_ORG=${{ secrets.INFLUXDB_ORG }}
            INFLUXDB_BUCKET=${{ secrets.INFLUXDB_BUCKET }}
            INFLUXDB_URL=${{ secrets.INFLUXDB_URL }}
            MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}
            MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: rakkaranta
          resource-group-name: rakkaranta 
          slot-name: production
          configuration-file: ./docker-compose.prod.yml

      - name: Verify Deployment
        run: |
          sleep 120
          curl -f https://rakkaranta.online/api/health || exit 1