# Stage 1: Deps
FROM node:20-alpine AS deps

RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm ci

# Stage 2: Builder
FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Define build-time arguments (passed via --build-arg)
ARG GOOGLE_CLIENT_ID
ARG GOOGLE_CLIENT_SECRET
ARG NEXTAUTH_GITHUB_ID
ARG NEXTAUTH_GITHUB_SECRET
ARG DATABASE_URL
ARG RESEND_API_KEY
ARG EMAIL_FROM
ARG STRIPE_API_KEY
ARG STRIPE_WEBHOOK_SECRET
ARG NEXT_PUBLIC_APP_URL
ARG NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID
ARG NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID
ARG NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID
ARG NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID
ARG KINDE_CLIENT_ID
ARG KINDE_CLIENT_SECRET
ARG KINDE_ISSUER_URL
ARG KINDE_SITE_URL
ARG KINDE_POST_LOGOUT_REDIRECT_URL
ARG KINDE_POST_LOGIN_REDIRECT_URL
ARG NEXT_PUBLIC_WEBSOCKET_URL

# Export them as environment variables
ENV GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
ENV GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
ENV NEXTAUTH_GITHUB_ID=$NEXTAUTH_GITHUB_ID
ENV NEXTAUTH_GITHUB_SECRET=$NEXTAUTH_GITHUB_SECRET
ENV DATABASE_URL=$DATABASE_URL
ENV RESEND_API_KEY=$RESEND_API_KEY
ENV EMAIL_FROM=$EMAIL_FROM
ENV STRIPE_API_KEY=$STRIPE_API_KEY
ENV STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET
ENV NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL
ENV NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID=$NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID
ENV NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID=$NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID
ENV NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID=$NEXT_PUBLIC_STRIPE_BUSINESS_MONTHLY_PLAN_ID
ENV NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID=$NEXT_PUBLIC_STRIPE_BUSINESS_YEARLY_PLAN_ID
ENV KINDE_CLIENT_ID=$KINDE_CLIENT_ID
ENV KINDE_CLIENT_SECRET=$KINDE_CLIENT_ID
ENV KINDE_ISSUER_URL=$KINDE_ISSUER_URL
ENV KINDE_SITE_URL=$KINDE_SITE_URL
ENV KINDE_POST_LOGOUT_REDIRECT_URL=$KINDE_POST_LOGOUT_REDIRECT_URL
ENV KINDE_POST_LOGIN_REDIRECT_URL=$KINDE_POST_LOGIN_REDIRECT_URL
ENV NEXT_PUBLIC_WEBSOCKET_URL=$NEXT_PUBLIC_WEBSOCKET_URL
# Make sure you have the standalone output configured in next.config.js
RUN npx prisma generate
RUN npm run build

# Stage 3: Production
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

# Copy necessary files for Prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/prisma ./prisma

# Copy standalone output and static files
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

EXPOSE 3000

# Start the app in production mode
# The server.js file is at the root level in standalone mode
CMD ["node", "server.js"] 